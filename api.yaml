AWSTemplateFormatVersion: "2010-09-09"
Description: "My API Gateway and Lambda function"
Resources:
  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "lambda:InvokeFunction"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Effect: "Allow"
                Resource: '*'
          PolicyName: "lambdaIAMRole"
  getMediaRandom:
    Type: AWS::Lambda::Function
    DependsOn: lambdaIAMRole
    Properties:
      FunctionName: 'getMediaRandom'
      Runtime: nodejs12.x
      Role:
        "Fn::GetAtt": ["lambdaIAMRole", "Arn"]
      Handler: getMediaRandom.handler
      Code:
        S3Bucket: lambdas
        S3Key: getMediaRandom.zip
      Description: A lambda.
      TracingConfig:
        Mode: Active
  mediaApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "mediaApi"
      Description: "My API"
  mediaApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref mediaApi
      ParentId: 
        "Fn::GetAtt": ["mediaApi", "RootResourceId"]
      PathPart: media
  mediaApiGET:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration: 
        Type: "AWS_PROXY"
        IntegrationHttpMethod: POST
        Uri: 
          !Join
            - '' 
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt getMediaRandom.Arn
              - '/invocations'
      RequestParameters: 
        method.request.querystring.type : true
      ResourceId: !Ref mediaApiResource
      RestApiId: !Ref mediaApi
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "mediaApiGET"
    Properties:
      RestApiId: !Ref mediaApi
      StageName: test
  MovieDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "releaseYear"
          AttributeType: "N"
        - 
          AttributeName: "title"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "releaseYear"
          KeyType: "HASH"
        - 
          AttributeName: "title"
          KeyType: "RANGE"
      TableName: "MovieDB"
Outputs: 
  restId: 
    Description: Rest api ID for media endpoint
    Value: !Ref mediaApi 
  lambdaArns: 
    Description: Lambda ARN for getMediaRandom
    Value: 
      !GetAtt getMediaRandom.Arn

 